#!/usr/bin/env node

const { Command } = require('commander');
const chalk = require('chalk');
const { spawn } = require('child_process');
const path = require('path');

/**
 * Server management CLI
 */
const program = new Command();

program
  .name('notify-server')
  .description('SSH Notify Tool Server Management')
  .version('1.0.0');

// Start server command
program
  .command('start')
  .description('Start notification server')
  .option('-p, --port <port>', 'Server port', '5000')
  .option('-h, --host <host>', 'Server host', '127.0.0.1')
  .option('-c, --config <path>', 'Configuration file path')
  .option('-d, --daemon', 'Run as daemon')
  .action(async (options) => {
    console.log(chalk.blue('Starting notification server...'));
    
    const serverPath = path.join(__dirname, '../../server/src/index.js');
    const env = { ...process.env };
    
    // Set environment variables from options
    if (options.port) env.NOTIFY_SERVER_PORT = options.port;
    if (options.host) env.NOTIFY_SERVER_HOST = options.host;
    if (options.config) env.NOTIFY_CONFIG_PATH = options.config;
    
    const serverProcess = spawn('node', [serverPath], {
      env,
      stdio: options.daemon ? 'pipe' : 'inherit',
      detached: options.daemon
    });
    
    if (options.daemon) {
      serverProcess.unref();
      console.log(chalk.green(`Server started as daemon (PID: ${serverProcess.pid})`));
      
      // Save PID for stop command
      const fs = require('fs');
      const os = require('os');
      const pidFile = path.join(os.tmpdir(), 'notify-server.pid');
      fs.writeFileSync(pidFile, serverProcess.pid.toString());
    } else {
      serverProcess.on('exit', (code) => {
        console.log(chalk.yellow(`Server exited with code ${code}`));
      });
    }
  });

// Stop server command
program
  .command('stop')
  .description('Stop notification server')
  .action(() => {
    const fs = require('fs');
    const os = require('os');
    const pidFile = path.join(os.tmpdir(), 'notify-server.pid');
    
    if (!fs.existsSync(pidFile)) {
      console.log(chalk.yellow('No running server found'));
      return;
    }
    
    const pid = parseInt(fs.readFileSync(pidFile, 'utf8'));
    
    try {
      process.kill(pid, 'SIGTERM');
      fs.unlinkSync(pidFile);
      console.log(chalk.green('Server stopped successfully'));
    } catch (error) {
      console.log(chalk.red(`Failed to stop server: ${error.message}`));
    }
  });

// Status command
program
  .command('status')
  .description('Show server status')
  .action(() => {
    const fs = require('fs');
    const os = require('os');
    const pidFile = path.join(os.tmpdir(), 'notify-server.pid');
    
    if (fs.existsSync(pidFile)) {
      const pid = parseInt(fs.readFileSync(pidFile, 'utf8'));
      
      try {
        // Check if process is still running
        process.kill(pid, 0);
        console.log(chalk.green(`Server is running (PID: ${pid})`));
      } catch (error) {
        fs.unlinkSync(pidFile);
        console.log(chalk.yellow('Server is not running'));
      }
    } else {
      console.log(chalk.yellow('Server is not running'));
    }
  });

program.parse();